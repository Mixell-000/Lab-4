import java.util.*;
import java.io.*;

class Paciente {
	private String Nombre;
	private String Apellido;
	private String Id;
	private int Categoria;
	private long TiempoLlegada;
	private String Estado;
	private String Area;
	private Stack<String> HistorialCambios;
	private long MEEQLA = -1; //Minuto En El Que Lo Atendieron

	Paciente(String Nombre,String Apellido,String Id,int Categoria,long TiempoLlegada,String Estado,String Area,Stack<String> HistorialCambios) {
		this.Nombre = Nombre;
		this.Apellido = Apellido;
		this.Id = Id;
		this.Categoria = Categoria;
		this.TiempoLlegada = TiempoLlegada;
		this.Estado = Estado;
		this.Area = Area;
		this.HistorialCambios = HistorialCambios;
		this.MEEQLA = MEEQLA;
	}
	public void SetMEEQLA(long MEEQLA) {
		this.MEEQLA = MEEQLA;
	}

	public void SetNombre (String NewNombre) {
		Nombre = NewNombre;
	}
	public void SetApellido (String NewApellido) {
		Apellido = NewApellido;
	}
	public void SetId (String NewId) {
		Id = NewId;
	}
	public void SetCategoria (int NewCategoria) {
		Categoria = NewCategoria;
	}
	public void SetTiempoLlegada (long NewTiempoLlegada) {
		TiempoLlegada = NewTiempoLlegada;
	}
	public void SetEstado (String NewEstado) {
		Estado = NewEstado;
	}
	public void SetArea (String NewArea) {
		Area = NewArea;
	}
	public void SetHistorialCambios (Stack<String> NewHistorialCambios) {
		HistorialCambios = NewHistorialCambios;
	}

	public long getMEEQLA() {
		if (Estado.equals("atendido") && MEEQLA > 0) {
			return (MEEQLA - TiempoLlegada) / 60;
		} else {
			return -1; // Naca
		}
	}

	public String GetNombre() {
		return Nombre;
	}
	public String GetApellido() {
		return Apellido;
	}
	public String GetId() {
		return Id;
	}
	public int GetCategoria() {
		return Categoria;
	}
	public long GetTiempoLlegada() {
		return TiempoLlegada;
	}
	public String GetEstado() {
		return Estado;
	}
	public String GetArea() {
		return Area;
	}
	public Stack<String> GetHistorialCambios() {
		return HistorialCambios;
	}

	public long tiempoEsperaActual() {
		long tiempoActual = System.currentTimeMillis() / 1000L;
		long diferenciaTiempo = tiempoActual - TiempoLlegada;
		return diferenciaTiempo/60;
	}

	public void registrarCambio(String descripcion) {
		HistorialCambios.push(descripcion + " / / / " + new Date().toString());
	}

	public String obtenerUltimoCambio() {
		if(HistorialCambios.isEmpty() == false) {
			return HistorialCambios.pop();
		}
		else {
			return "No hay cambios.";
		}

	}

	public void Printcosos() {
		System.out.println("Nombre : " + Nombre);
		System.out.println("Apellido : " + Apellido);
		System.out.println("Id : " + Id);
		System.out.println("Categoria : " + Categoria);
		System.out.println("TiempoLlegada : " + TiempoLlegada);
		System.out.println("Estado : " + Estado);
		System.out.println("Area : " + Area);
		System.out.println("HistorialCambios : " + HistorialCambios);
		System.out.println("Minuto en el que lo atendieron : " + MEEQLA);
	}
};//listo

class AreaAtencion {
    private String Nombre;
    private PriorityQueue<Paciente> PacientesHeap;
    private int CapacidadMaxima;

    AreaAtencion(String Nombre, PriorityQueue<Paciente> PacientesHeap, int CapacidadMaxima) {
        this.Nombre = Nombre;
        this.PacientesHeap = PacientesHeap;
        this.CapacidadMaxima = CapacidadMaxima;
    }

    public void SetNombre(String NewNombre) {
        Nombre = NewNombre;
    }
    public void SetPacientesHeap(PriorityQueue<Paciente> NewPacientesHeap) {
        PacientesHeap = NewPacientesHeap;
    }
    public void SetCapacidadMaxima(int NewCapacidadMaxima) {
        CapacidadMaxima = NewCapacidadMaxima;
    }

    public String GetNombre() {
        return Nombre;
    }
    public PriorityQueue<Paciente> GetPacientesHeap() {
        return PacientesHeap;
    }
    public int GetCapacidadMaxima() {
        return CapacidadMaxima;
    }

    public void ingresarPaciente(Paciente p) {
        if (!estaSaturada()) {
            PacientesHeap.add(p);
        }
    }

    public Paciente atenderPaciente() {
        return PacientesHeap.poll(); // Si está vacío, retorna null
    }

    public boolean estaSaturada() {
        return PacientesHeap.size() >= CapacidadMaxima;
    }

    public List<Paciente> obtenerPacientesPorHeapSort() {
        List<Paciente> pacientesOrdenados = new ArrayList<>(PacientesHeap);

        pacientesOrdenados.sort(
                Comparator.comparingInt(Paciente::GetCategoria)
                        .thenComparingLong(Paciente::GetTiempoLlegada)
        );

        return pacientesOrdenados;
    }

    public void Printcosos() {
        System.out.println("Nombre : " + Nombre);
        System.out.println("PacientesHeap : " + PacientesHeap);
        System.out.println("CapacidadMaxima : " + CapacidadMaxima);
    }
};//listo

class Hospital {
	private Map<String, Paciente> pacientesTotales;
	private PriorityQueue<Paciente> colaAtencion;
	private Map<String, AreaAtencion> areasAtencion;
	private List<Paciente> pacientesAtendidos;

	Hospital(Map<String, Paciente> PacientesTotales,
			 PriorityQueue<Paciente> ColaAtencion,
			 Map<String, AreaAtencion> AreasAtencion,
			 List<Paciente> PacientesAtendidos) {
		this.pacientesTotales = PacientesTotales;
		this.colaAtencion = ColaAtencion;
		this.areasAtencion = AreasAtencion;
		this.pacientesAtendidos = PacientesAtendidos;
	}

	public void SetPacientesTotales(Map<String, Paciente> nuevosPacientes) {
		pacientesTotales = nuevosPacientes;
	}

	public void SetColaAtencion(PriorityQueue<Paciente> nuevaCola) {
		colaAtencion = nuevaCola;
	}

	public void SetAreasAtencion(Map<String, AreaAtencion> nuevasAreas) {
		areasAtencion = nuevasAreas;
	}

	public void SetPacientesAtendidos(List<Paciente> nuevosAtendidos) {
		pacientesAtendidos = nuevosAtendidos;
	}

	public Map<String, Paciente> GetPacientesTotales() {
		return pacientesTotales;
	}

	public PriorityQueue<Paciente> GetColaAtencion() {
		return colaAtencion;
	}

	public Map<String, AreaAtencion> GetAreasAtencion() {
		return areasAtencion;
	}

	public List<Paciente> GetPacientesAtendidos() {
		return pacientesAtendidos;
	}

	public void Printcosos() {
		System.out.println("PacientesTotales: " + pacientesTotales.keySet());
		System.out.println("ColaAtencion: " + colaAtencion);
		System.out.println("AreasAtencion: " + areasAtencion.keySet());
		System.out.println("PacientesAtendidos: " + pacientesAtendidos.size());
	}


	public void registrarPaciente(Paciente p) {
		pacientesTotales.put(p.GetId(), p);
		colaAtencion.add(p);

		AreaAtencion area = obtenerArea(p.GetArea());
		if (area != null) {
			area.ingresarPaciente(p);
		}

		p.registrarCambio("Paciente registrado en el sistema");
	}




	public void reasignarCategoria(String id, int nuevaCategoria) {
		Paciente p = pacientesTotales.get(id);
		if (p != null) {
			int antiguaCategoria = p.GetCategoria();
			p.SetCategoria(nuevaCategoria);

			p.registrarCambio("Categoría cambiada de C" + antiguaCategoria + " a C" + nuevaCategoria);

			colaAtencion.remove(p);
			colaAtencion.add(p);
		}
	}




	public Paciente atenderSiguiente(int minutoSimulado) {
		Paciente siguiente = colaAtencion.poll();
		if (siguiente != null) {
			siguiente.SetEstado("atendido");
			siguiente.registrarCambio("Paciente atendido y removido de la cola central");
			siguiente.SetMEEQLA(minutoSimulado * 60L);

			AreaAtencion area = obtenerArea(siguiente.GetArea());
			if (area != null) {
				area.atenderPaciente();
			}
			pacientesAtendidos.add(siguiente);
		}
		return siguiente;
	}



	public List<Paciente> obtenerPacientesPorCategoria(int categoria) {
		List<Paciente> resultado = new ArrayList<>();
		for (Paciente p : colaAtencion) {
			if (p.GetCategoria() == categoria) {
				resultado.add(p);
			}
		}
		return resultado;
	}

	public AreaAtencion obtenerArea(String nombre) {
		return areasAtencion.get(nombre);
	}






};//listo

class GeneradorPacientes {
	private static String[] PapuNombres = {"Javoer", "Michell", "Marcos", "Gon", "Kurapika", "Leorio", "Killua", "Eren", "Mikasa", "Armin", "Miku", "Teto", "Satoru", "Miyuki", "Kaguya", "Senku", "Subaru", "Emilia", "Rem", "Kazuma", "Aqua", "Megumin", "Ainz", "Ash", "Marin", "Pekora", "Gura"};
	private static String[] PapuApellidos = {"Santibañez", "Soto", "Fantoval", "Freecss", "Paladiknight", "Zoldyck", "Jaeger", "Ackerman", "Arlert", "Hatsune", "Kasane", "Gojo", "Shirogane", "Shinomiya", "Ishibami", "Natsuki", "Satou", "Ooal Gown", "Ketchum", "Houshou", "Usada", "Gawr"};
	private static String[] PapuAreas = {"SAPU", "Urgencia_Adulto", "Infantil"};
	private static Random Papualeatorio = new Random();

	public static List<Paciente> GenerarPacientes(int PapuCantidad, long PapuTimestampInicio) {
		List<Paciente> PapuListaPacientes = new ArrayList<>();

		for (int i = 0; i < PapuCantidad; i++) {
			String Papunombre = PapuNombres[Papualeatorio.nextInt(PapuNombres.length)];
			String PapuApellido = PapuApellidos[Papualeatorio.nextInt(PapuApellidos.length)];
			String PapuId = "N" + i;
			int PapuCategoria = QueTanMoridoEsta();
			long PapuTiempoLlegada = PapuTimestampInicio + (i * 600);
			String PapuEstado = "en_espera";
			String PapuArea = PapuAreas[Papualeatorio.nextInt(PapuAreas.length)];
			Stack<String> PapuHistorial = new Stack<>();

			Paciente PapuPaciente = new Paciente(Papunombre, PapuApellido, PapuId, PapuCategoria, PapuTiempoLlegada, PapuEstado, PapuArea, PapuHistorial);
			PapuListaPacientes.add(PapuPaciente);
		}
		return PapuListaPacientes;
	}

	static int QueTanMoridoEsta() {
		int PapuValor = Papualeatorio.nextInt(100);
		if (PapuValor < 10) return 1;
		else if (PapuValor < 25) return 2;
		else if (PapuValor < 43) return 3;
		else if (PapuValor < 70) return 4;
		else return 5;
	}

	public static void EnlistarALosPacientes(List<Paciente> PapuPacientes, String PapuNombreArchivo) {
		try (PrintWriter PapuWriter = new PrintWriter(new FileWriter(PapuNombreArchivo))) {
			Map<Integer, Long> sumaPorCat = new HashMap<>();
			Map<Integer, Integer> cuentaPorCat = new HashMap<>();

			for (Paciente p : PapuPacientes) {
				PapuWriter.println(
						p.GetNombre() + " " + p.GetApellido() + ", " +
								p.GetId() + ", " +
								p.GetCategoria() + ", " +
								p.GetTiempoLlegada()/60 + ", " +
								p.GetEstado() + ", " +
								p.GetArea() + ", " +
								"Tiempo esperado:" + p.getMEEQLA()
				);

				long espera = p.getMEEQLA();
				if (espera >= 0) {
					int cat = p.GetCategoria();
					sumaPorCat.put(cat, sumaPorCat.getOrDefault(cat, 0L) + espera);
					cuentaPorCat.put(cat, cuentaPorCat.getOrDefault(cat, 0) + 1);
				}
			}

			PapuWriter.println();
			PapuWriter.println("★★★ Estadísticas de Tiempo de Espera por Categoría ★★★");
			for (int categoria = 1; categoria <= 5; categoria++) {
				Long suma = sumaPorCat.get(categoria);
				Integer cuenta = cuentaPorCat.get(categoria);
				if (cuenta != null && cuenta > 0) {
					double promedio = (double) suma / cuenta;
					PapuWriter.printf(
							"C%d: Promedio = %.2f minutos %n",
							categoria, promedio, cuenta
					);
				} else {
					PapuWriter.printf(
							"C%d: No hay PapuPacientes Pipipi.%n",
							categoria
					);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

};//listo

class SimuladorUrgencia {

	private Hospital hospital;
	private List<Paciente> pacientesGenerados;
	private long timestampInicio;
	private int pacientesGeneradosCount = 0;

	public SimuladorUrgencia(Hospital hospital, List<Paciente> pacientesGenerados, long timestampInicio) {
		this.hospital = hospital;
		this.pacientesGenerados = pacientesGenerados;
		this.timestampInicio = timestampInicio;
	}

	public void simular() {
		int nuevosPacientesAcumulados = 0;
		int totalMinutos = 24 * 60;

		for (int minuto = 0; minuto < totalMinutos; minuto++) {
			String horaSimulada = String.format("%02d:%02d", minuto / 60, minuto % 60);

			if (minuto % 15 == 0) {
				hospital.atenderSiguiente(minuto);
			}

			if (nuevosPacientesAcumulados > 2) {
				hospital.atenderSiguiente(minuto);
				hospital.atenderSiguiente(minuto);
				nuevosPacientesAcumulados = 0;
			}

			if (minuto % 10 == 0 && pacientesGeneradosCount < pacientesGenerados.size()) {
				Paciente nuevoPaciente = pacientesGenerados.get(pacientesGeneradosCount);
				hospital.registrarPaciente(nuevoPaciente);
				pacientesGeneradosCount++;
				nuevosPacientesAcumulados++;
			}



			System.out.println("---- Minuto " + minuto + " | Hora: " + horaSimulada + " ----");
			System.out.println("Pacientes en espera : " + hospital.GetColaAtencion().size());
			System.out.println("Pacientes atendidos : " + hospital.GetPacientesAtendidos().size());
			System.out.println("Lista de espera:");
			for (Paciente p : hospital.GetColaAtencion()) {
				System.out.println("★ " + p.GetNombre() + " " + p.GetApellido() + " | Área: " + p.GetArea() + " | C" + p.GetCategoria());

			}
			System.out.println();
		}

		System.out.println("GG.");
	}

}


public class main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        String opcion = "";

        Comparator<Paciente> comparadorPapu = Comparator
                .comparingInt(Paciente::GetCategoria)
                .thenComparingLong(Paciente::GetTiempoLlegada);

        Map<String, Paciente> mapaPacientes = new HashMap<>();
        PriorityQueue<Paciente> colaAtencion = new PriorityQueue<>(comparadorPapu);
        Map<String, AreaAtencion> areasAtencion = new HashMap<>();
        List<Paciente> pacientesAtendidos = new ArrayList<>();

        areasAtencion.put("SAPU", new AreaAtencion("SAPU", new PriorityQueue<>(comparadorPapu), 50));
        areasAtencion.put("Urgencia_Adulto", new AreaAtencion("Urgencia_Adulto", new PriorityQueue<>(comparadorPapu), 50));
        areasAtencion.put("Infantil", new AreaAtencion("Infantil", new PriorityQueue<>(comparadorPapu), 50));

        Hospital hospital = new Hospital(mapaPacientes, colaAtencion, areasAtencion, pacientesAtendidos);

        long timestampInicio = 0;
        List<Paciente> pacientesGenerados = GeneradorPacientes.GenerarPacientes(144, timestampInicio);

        SimuladorUrgencia simulador = new SimuladorUrgencia(hospital, pacientesGenerados, timestampInicio);

        System.out.println("=== Bienvenido al Sistema de Simulación Hospitalaria ===");

        while (!opcion.equals("4")) {
            System.out.println("\nMenú Principal:");
            System.out.println("1. Ejecutar simulación");
            System.out.println("2. Mostrar cantidad total de pacientes atendidos");
            System.out.println("3. Mostrar lista de pacientes atendidos");
            System.out.println("4. Salir");
            System.out.println("5. Exportar pacientes generados a archivo");
            System.out.print("Seleccione una opción: ");
            opcion = scanner.nextLine();

            switch (opcion) {
                case "1":
                    simulador.simular();
                    break;

                case "2":
                    System.out.println("Pacientes atendidos: " + hospital.GetPacientesAtendidos().size());
                    break;

                case "3":
                    System.out.println("--- Pacientes atendidos ---");
                    for (Paciente p : hospital.GetPacientesAtendidos()) {
                        System.out.println(p.GetNombre() + " " + p.GetApellido() + " - Categoría: C" + p.GetCategoria() +
                                " - Espera (min): " + p.getMEEQLA());
                    }
                    break;

                case "4":
                    System.out.println("Bais Bais");
                    break;

                case "5":
                    GeneradorPacientes.EnlistarALosPacientes(pacientesGenerados, "Pacientes_24h.txt");
                    System.out.println("Archivo 'Pacientes_24h.txt' generado exitosamente.");
                    break;

                default:
                    System.out.println("?");
            }
        }
        scanner.close();
    }
}
